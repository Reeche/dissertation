import re
import ast

# filter for adpative participants
# these are participants whose actual score or number of clicks Mann kendall test S > 0 (or S < 0 for low variance)
learning_participants = {
    "v1.0": [1, 5, 6, 10, 15, 17, 18, 21, 29, 34, 35, 38, 40, 43, 55, 56, 59, 66, 68, 69, 73, 75, 77, 80, 82, 94,
             98, 101, 104, 112, 117, 119, 124, 126, 132, 144, 146, 148, 154, 158, 160, 165],
    "c2.1": [0, 3, 8, 13, 20, 22, 25, 26, 30, 31, 33, 39, 41, 47, 49, 52, 53, 58, 60, 64, 67, 78, 79, 84, 88, 95,
             96, 99, 103, 107, 108, 115, 118, 123, 128, 133, 134, 136, 138, 145, 149, 152, 162, 164, 166],
    "c1.1": [2, 7, 12, 28, 32, 42, 44, 46, 57, 63, 71, 74, 89, 92, 100, 102, 109, 114, 116, 125, 139, 153, 157,
             167],
    "high_variance_high_cost": [0, 1, 18, 32, 38, 47, 49, 57, 60, 70, 74, 76, 81, 83, 94, 103, 108, 109, 111, 114,
                                129, 134, 139, 149, 161, 164, 169, 177, 182, 191, 195, 198],
    "high_variance_low_cost": [4, 7, 8, 17, 23, 35, 48, 50, 51, 53, 58, 71, 82, 92, 93, 96, 101, 117, 126, 136, 141,
                               145, 146, 151, 154, 158, 180, 189, 197],
    "low_variance_high_cost": [2, 13, 14, 21, 24, 28, 31, 36, 37, 43, 45, 61, 62, 68, 69, 73, 79, 80, 84, 86, 98,
                               100, 102, 107, 124, 128, 132, 135, 138, 144, 147, 153, 157, 160, 163, 166, 171, 174,
                               181, 183, 201, 203, 206],
    "low_variance_low_cost": [3, 6, 9, 12, 19, 27, 34, 42, 44, 52, 66, 77, 85, 91, 104, 105, 106, 110, 113, 115,
                              121, 130, 137, 143, 165, 170, 172, 176, 179, 184, 186, 196, 200],
    "strategy_discovery": [1, 2, 3, 4, 6, 7, 9, 10, 11, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 32, 33,
                           36, 37, 39, 40, 42, 43, 44, 46, 47, 48, 50, 51, 52, 53, 54, 55]}

### significantly learning participants
# strategy_discovery: used adaptitve strategy at least 10 times
# three cond: bonus above a certain threshold (manually set)
# learning_participants = {
#     "v1.0": [1, 5, 6, 10, 15, 17, 18, 21, 34, 38, 43, 55, 56, 59, 68, 69, 73, 80, 82, 94,
#              98, 101, 104, 112, 119, 124, 144, 146, 154, 160, 165],
#     "c2.1": [64, 67, 93, 113, 130, 172],
#     "c1.1": [2, 32, 36, 37, 42, 63, 74, 81, 83, 89, 92, 109, 114, 135, 143, 151, 159, 168, 171],
#     "strategy_discovery": [1, 3, 6, 7, 9, 12, 15, 17, 19, 21, 28, 29, 30, 32, 33, 36, 39, 40, 42, 46, 47, 51, 52, 53, 54, 55]
# }

### new criteria:
# for planning amount, learning_participant is better because it also accounts for participants who learned, i.e changed their number of clicks at least once
# clicking_particpants might be better for three cond, that is those people clicked at least once but might not have learned anything
clicking_participants = {
    "v1.0": [1, 5, 6, 10, 15, 17, 18, 21, 24, 29, 34, 35, 38, 40, 43, 45, 55, 56, 59, 62, 66, 68, 69, 73, 75, 77, 80,
             82, 85, 90, 94, 98, 101, 104, 106, 110, 112, 117, 119, 124, 132, 137, 140, 144, 146, 148, 150, 154, 155,
             158, 160, 165, 169, 173],
    "c2.1": [0, 8, 13, 16, 20, 22, 25, 26, 30, 31, 33, 39, 41, 47, 49, 52, 53, 58, 60, 61, 64, 67, 72, 78, 79, 84, 86,
             88, 93, 95, 96, 99, 103, 107, 108, 113, 115, 118, 122, 123, 128, 130, 133, 134, 136, 138, 142, 145, 149,
             152, 156, 162, 164, 166, 170, 172],
    "c1.1": [2, 4, 7, 9, 12, 14, 19, 23, 27, 28, 32, 36, 37, 42, 44, 48, 50, 54, 57, 63, 65, 70, 71, 74, 76, 81, 83, 89,
             91, 92, 100, 102, 105, 109, 111, 114, 116, 120, 125, 127, 129, 131, 135, 139, 143, 147, 151, 153, 157, 159,
             161, 163, 167, 168, 171],
    'low_variance_low_cost': [3, 5, 6, 9, 11, 12, 15, 19, 27, 34, 39, 42, 44, 52, 55, 59, 66, 67, 72, 75, 77, 85, 91,
                              99, 104, 105, 106, 110, 113, 115, 121, 123, 127, 130, 137, 142, 143, 152, 155, 159, 165,
                              170, 172, 176, 179, 184, 186, 196, 200, 207],
    'low_variance_high_cost': [2, 13, 14, 16, 21, 24, 28, 31, 36, 37, 43, 45, 61, 62, 68, 69, 73, 79, 80, 84, 86, 90,
                               98, 100, 102, 107, 124, 128, 132, 135, 138, 140, 144, 147, 153, 157, 160, 163, 166, 171,
                               174, 181, 183, 194, 201, 203, 206],
    'high_variance_low_cost': [4, 7, 8, 17, 23, 26, 29, 33, 35, 40, 48, 50, 51, 53, 56, 58, 64, 71, 78, 82, 87, 92, 93,
                               96, 101, 112, 117, 119, 122, 126, 131, 133, 136, 141, 145, 146, 151, 154, 158, 162, 168,
                               175, 180, 185, 187, 189, 193, 197, 205],
    'high_variance_high_cost': [0, 1, 10, 18, 22, 25, 30, 32, 38, 41, 46, 47, 49, 57, 60, 63, 70, 74, 76, 81, 83, 88,
                                94, 103, 108, 109, 111, 114, 116, 118, 125, 129, 134, 139, 149, 150, 156, 161, 164, 167,
                                169, 173, 177, 182, 188, 191, 195, 198, 199, 204],
    'strategy_discovery': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
                           26, 27, 28,
                           29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,
                           53, 54, 55,
                           56, 57, 58, 59, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
                           81, 82, 83,
                           84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 101, 102, 103, 104, 105, 106, 107,
                           109, 110, 111,
                           112, 113, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
                           133, 134, 135,
                           136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154,
                           155, 156, 159,
                           160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177,
                           178, 180, 181,
                           182, 183, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
                           202, 203, 204,
                           205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224,
                           225, 226, 228,
                           229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 246, 247, 248, 249,
                           250, 251, 252,
                           253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271,
                           272, 273, 274,
                           275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292,
                           293, 294, 295,
                           296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315,
                           316, 317, 318,
                           319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337,
                           339, 340, 341,
                           342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359,
                           360, 361, 362,
                           363, 364, 365, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378]}  # n=350
not_examined_all_pid = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 25, 26, 27, 28, 29, 30, 32,
                        33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58,
                        59, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86,
                        87, 89, 90, 91, 92, 93, 95, 96, 98, 99, 101, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113,
                        115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 130, 131, 133, 134, 136, 137,
                        138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 152, 153, 154, 155, 156, 159, 160, 161, 162,
                        163, 165, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185,
                        186, 187, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
                        209, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 229, 231, 232, 233,
                        235, 236, 237, 238, 239, 240, 241, 242, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
                        256, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277,
                        278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298,
                        299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319,
                        320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 333, 335, 336, 337, 339, 341, 342, 345, 346,
                        347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 364, 365, 367, 369,
                        371, 373, 374, 375, 376, 377, 378]
examined_all_pid = [1, 2, 20, 22, 24, 45, 50, 68, 80, 88, 111, 129, 135, 142, 148, 151, 164, 166, 172, 189, 210, 213,
                    228, 234, 257, 264, 276, 282, 313, 324, 331, 332, 338, 340, 343, 344, 358, 363, 370, 372]
habitual_examined_all_pid = [1, 129, 257, 135, 142, 20, 148, 22, 151, 276, 282, 50, 313, 331, 332, 210, 343, 88, 358,
                             234, 363, 111, 370]


def assign_model_names(row):
    if row['class'] == 'hybrid' and str(row['model_index']) in ["491", "3326"]:
        return 'hybrid Reinforce'
    elif row['class'] == 'hybrid' and str(row['model_index']) == "479":
        return 'hybrid LVOC'
    elif row['class'] in ['pure', 'mf'] and str(row['model_index']) == "491":
        return 'MF - Reinforce'
    elif row['class'] in ['pure', 'mf'] and str(row['model_index']) == "479":
        return 'MF - LVOC'
    elif str(row['model_index']) == "1743":
        return 'Habitual'
    elif str(row['model_index']) == "1756":
        return 'Non-learning'
    elif str(row['model_index']) == "522":
        return 'SSL'
    elif row['model_index'] == "no_assumption_level":
        return 'MB - Uniform, grouped'
    elif row['model_index'] == "no_assumption_individual":
        return 'MB - Uniform, ind.'
    elif row['model_index'] == "uniform_individual":
        return 'MB - Equal, ind.'
    elif row['model_index'] == "uniform_level":
        return 'MB - Equal, grouped'
    elif row['model_index'] == "level_level":
        return 'MB - Level, grouped'
    elif row['model_index'] == "level_individual":
        return 'MB - Level, ind.'
    else:
        raise ValueError("Model class combination not found")


## strategy discovery k means based on score
adaptive_pid = [2, 6, 11, 17, 28, 29, 32, 35, 36, 38, 39, 48, 49, 53, 55, 59, 63, 70, 74, 75, 79, 82, 84, 86, 89, 92,
                95, 103, 105, 109, 111, 112, 115, 118, 125, 147, 151, 154, 165, 166, 171, 172, 173, 174, 175, 181, 186,
                193, 195, 196, 200, 202, 203, 205, 214, 215, 224, 234, 239, 241, 249, 251, 256, 259, 260, 261, 265, 271,
                279, 281, 282, 289, 294, 300, 312, 316, 318, 320, 323, 327, 335, 339, 340, 344, 352, 353, 354, 357, 359,
                360, 369, 378]  # n=92
mod_adaptive_pid = [1, 3, 5, 7, 8, 12, 13, 14, 15, 16, 20, 21, 23, 24, 25, 26, 27, 30, 33, 34, 37, 40, 41, 42, 43, 44,
                    45, 46, 47, 51, 54, 57, 58, 62, 67, 68, 69, 71, 72, 73, 77, 78, 80, 81, 90, 91, 93, 96, 99, 102,
                    104, 106, 107, 110, 113, 116, 117, 120, 123, 124, 126, 127, 128, 131, 136, 139, 140, 141, 142, 143,
                    144, 145, 146, 149, 153, 155, 156, 159, 162, 163, 168, 169, 170, 176, 178, 180, 182, 183, 184, 185,
                    187, 189, 190, 194, 197, 198, 199, 206, 207, 209, 210, 211, 213, 217, 220, 221, 223, 225, 226, 228,
                    229, 231, 238, 242, 244, 247, 248, 252, 258, 263, 268, 269, 272, 273, 274, 275, 276, 277, 278, 280,
                    283, 285, 286, 287, 288, 290, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 310, 311, 314, 315,
                    317, 319, 321, 326, 329, 331, 333, 335, 337, 341, 342, 345, 347, 348, 349, 350, 351, 355, 358, 362,
                    363, 365, 367, 370, 371, 372, 373, 376, 377]  # n=179
maladaptive_pid = [4, 9, 10, 18, 19, 22, 50, 52, 56, 61, 65, 66, 76, 83, 85, 87, 88, 98, 101, 119, 122, 129, 130, 133,
                   134, 135, 137, 138, 148, 152, 160, 161, 164, 177, 192, 201, 204, 212, 216, 218, 219, 232, 233, 235,
                   236, 237, 240, 246, 250, 253, 254, 255, 257, 262, 266, 267, 270, 284, 291, 292, 293, 308, 309, 313,
                   322, 324, 325, 328, 330, 332, 336, 343, 346, 356, 361, 364, 374, 375]  # n=78

alternative_models = ["Non-learning", "SSL", "Habitual"]
mcrl_models = ["hybrid LVOC", "hybrid Reinforce", "MF - LVOC", "MF - Reinforce"]
# mb_models = ["MB - Uniform, grouped", "MB - Uniform, ind.", "MB - Equal, ind.",
#              "MB - Equal, grouped", "MB - Level, grouped", "MB - Level, ind."]

mb_models = ["MB - No Uniform, grouped", "MB - Uniform, ind.", "MB - Equal, ind.",
             "MB - Equal, grouped", "MB - Level, grouped", "MB - Level, ind."]


def process_clicks(row):
    return [len(sublist) - 1 for sublist in row]


def process_data(data, model_col, pid_col, exp):
    if exp == "strategy_discovery":
        data[pid_col] = data[pid_col].apply(
            lambda x: ast.literal_eval(re.sub(r'(?<=\d|\-)\s+(?=\d|\-)', ', ', x.replace('\n', ' '))) if isinstance(x,
                                                                                                                    str) else x)
        data[model_col] = data[model_col].apply(lambda x: ast.literal_eval(x) if isinstance(x, str) else x)
    elif pid_col == "pid_rewards":
        data[pid_col] = data[pid_col].apply(lambda x: [int(i) for i in x.strip("[]").split()])
    else:
        data[pid_col] = data[pid_col].apply(lambda x: ast.literal_eval(x))
        data[model_col] = data[model_col].apply(lambda x: ast.literal_eval(x))
    return data


### Planning amount pid groups according to BIC
planningamount_nonlearners = [0, 32, 47, 57, 74, 81, 17, 23, 154, 180, 21, 31, 124, 201, 12, 19, 27, 44, 52, 77, 104,
                              113, 130, 179,
                              184, 196, 200]
planningamount_learners = [1, 76, 169, 191, 18, 60, 129, 139, 198, 38, 94, 103, 161, 49, 134, 70, 182, 83, 195, 108,
                           109, 111, 114, 149, 164, 177, 4, 48, 58, 82, 92, 136, 151, 7, 145, 189, 8, 35, 96, 50, 51,
                           93, 126, 141, 53, 71, 101, 117, 158, 146, 197, 2, 14, 36, 73, 98, 135, 138, 144, 157, 171,
                           181, 183, 13, 68, 80, 160, 163, 174, 24, 62, 86, 153, 28, 37, 45, 69, 147, 43, 61, 79, 100,
                           107, 128, 132, 166, 206, 84, 203, 102, 3, 66, 176, 6, 9, 34, 105, 121, 42, 110, 172, 85, 91,
                           106, 186, 115, 137, 143, 165, 170]

planningamount_habitual = {
    "hvhc": [1, 76, 169, 191],
    "hvlc": [35, 96],
    "lvhc": [28, 37, 45, 69, 147],
    "lvlc": [85, 91, 106, 186]
}

planningamount_mcrl = {
    "hvhc": [18, 38, 49, 60, 70, 94, 103, 109, 111, 114, 129, 134, 139, 149, 161, 164, 182, 198, 4, 7, 8, 48, 51, 58,
             71, 82, 92, 93, 101, 117, 126, 136, 141, 145, 151, 158, 43, 84, 102, 203, 6, 9, 34, 105, 121, 189, 108,
             177, 83, 195],
    "hvlc": [35, 96, 146, 197, 50, 53],
    "lvhc": [28, 37, 45, 69, 147, 2, 14, 24, 36, 62, 73, 86, 98, 135, 138, 144, 153, 157, 171, 181, 183, 13, 61, 68, 79,
             80, 100, 107, 128, 132, 160, 163, 166, 174, 206],
    "lvlc": [85, 91, 106, 186, 115, 137, 143, 165, 170, 3, 42, 66, 110, 172, 176]
}

threecond_learners = [5, 35, 43, 82, 117, 137, 154, 1, 17, 29, 34, 38, 45, 62, 66, 80, 85, 90, 110, 155, 15, 104, 112,
                      119, 148, 150, 158, 21, 40, 55, 59, 73, 75, 77, 98, 101, 124, 132, 140, 160, 169, 0, 13, 78, 166,
                      25, 31, 64, 96, 123, 128, 133, 136, 142, 26, 84, 99, 113, 145, 152, 162, 33, 47, 79, 103, 118, 4,
                      32, 63, 76, 91, 120, 127, 129, 153, 157, 161, 2, 14, 125, 171, 7, 9, 27, 28, 42, 44, 48, 57, 139,
                      163, 12, 23, 83, 111, 116, 147]
threecond_nonlearners = [6, 10, 18, 24, 56, 68, 69, 94, 106, 144, 146, 165, 173, 8, 16, 20, 22, 30, 39, 41, 49, 52, 53,
                         58, 60, 61, 67, 72, 86, 88, 93, 95, 107, 108, 115, 122, 130, 134, 138, 149, 156, 164, 170, 172,
                         19, 36, 37, 50, 54, 65, 70, 71, 74, 81, 89, 92, 100, 102, 105, 109, 114, 131, 135, 143, 151,
                         159, 167, 168]

discovery_nonlearners = [18, 28, 32, 38, 56, 63, 72, 77, 82, 90, 103, 109, 122, 152, 173, 196,
                         239, 256, 275, 278, 309, 311, 315, 335, 336, 342, 346, 352, 353, 354, 371]
discovery_learners = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21,
                      22, 23, 24, 25, 26, 27, 29, 30, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44,
                      45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 65, 66,
                      67, 68, 69, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87,
                      88, 89, 91, 92, 93, 95, 96, 98, 99, 101, 102, 104, 105, 106, 107, 110,
                      111, 112, 113, 115, 116, 117, 118, 119, 120, 123, 124, 125, 126, 127,
                      128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
                      143, 144, 145, 146, 147, 148, 149, 151, 153, 154, 155, 156, 159, 160,
                      161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175,
                      176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192,
                      193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
                      209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223,
                      224, 225, 226, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 240,
                      241, 242, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257,
                      258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272,
                      273, 274, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288,
                      289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303,
                      304, 305, 306, 308, 310, 312, 313, 314, 316, 317, 318, 319, 320, 321,
                      322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 337,
                      339, 340, 341, 343, 344, 345, 347, 348, 349, 350, 351, 355, 356, 357,
                      358, 359, 360, 361, 362, 363, 364, 365, 367, 369, 370, 372, 373, 374,
                      375, 376, 377, 378]

discovery_hybrid = [3, 4, 6, 7, 9, 16, 17, 19, 23, 30, 34, 35, 41, 45, 53, 57, 58, 67, 71, 76,
                    78, 83, 86, 92, 106, 128, 133, 138, 139, 141, 143, 146, 155, 161, 164, 165,
                    167, 174, 175, 177, 184, 189, 194, 195, 201, 203, 206, 211, 216, 218, 219, 223,
                    228, 231, 232, 236, 238, 250, 255, 259, 260, 262, 267, 280, 281, 291, 292, 293,
                    299, 305, 310, 316, 317, 318, 320, 324, 327, 328, 341, 344, 347, 349, 350, 355,
                    356, 357, 359, 360, 361, 362, 373, 374, 375, 377]
