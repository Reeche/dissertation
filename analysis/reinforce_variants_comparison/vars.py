import ast
import re

# filter for adpative participants
# these are participants whose actual score or number of clicks Mann kendall test S > 0 (or S < 0 for low variance)
learning_participants = {
    "v1.0": [1, 5, 6, 10, 15, 17, 18, 21, 29, 34, 35, 38, 40, 43, 55, 56, 59, 66, 68, 69, 73, 75, 77, 80, 82, 94,
             98, 101, 104, 112, 117, 119, 124, 126, 132, 144, 146, 148, 154, 158, 160, 165],
    "c2.1": [0, 3, 8, 13, 20, 22, 25, 26, 30, 31, 33, 39, 41, 47, 49, 52, 53, 58, 60, 64, 67, 78, 79, 84, 88, 95,
             96, 99, 103, 107, 108, 115, 118, 123, 128, 133, 134, 136, 138, 145, 149, 152, 162, 164, 166],
    "c1.1": [2, 7, 12, 28, 32, 42, 44, 46, 57, 63, 71, 74, 89, 92, 100, 102, 109, 114, 116, 125, 139, 153, 157,
             167],
    "high_variance_high_cost": [0, 1, 18, 32, 38, 47, 49, 57, 60, 70, 74, 76, 81, 83, 94, 103, 108, 109, 111, 114,
                                129, 134, 139, 149, 161, 164, 169, 177, 182, 191, 195, 198],
    "high_variance_low_cost": [4, 7, 8, 17, 23, 35, 48, 50, 51, 53, 58, 71, 82, 92, 93, 96, 101, 117, 126, 136, 141,
                               145, 146, 151, 154, 158, 180, 189, 197],
    "low_variance_high_cost": [2, 13, 14, 21, 24, 28, 31, 36, 37, 43, 45, 61, 62, 68, 69, 73, 79, 80, 84, 86, 98,
                               100, 102, 107, 124, 128, 132, 135, 138, 144, 147, 153, 157, 160, 163, 166, 171, 174,
                               181, 183, 201, 203, 206],
    "low_variance_low_cost": [3, 6, 9, 12, 19, 27, 34, 42, 44, 52, 66, 77, 85, 91, 104, 105, 106, 110, 113, 115,
                              121, 130, 137, 143, 165, 170, 172, 176, 179, 184, 186, 196, 200],
    "strategy_discovery": [1, 2, 3, 4, 6, 7, 9, 10, 11, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 32, 33,
                           36, 37, 39, 40, 42, 43, 44, 46, 47, 48, 50, 51, 52, 53, 54, 55]}

### significantly learning participants
# strategy_discovery: used adaptitve strategy at least 10 times
# three cond: bonus above a certain threshold (manually set)
# learning_participants = {
#     "v1.0": [1, 5, 6, 10, 15, 17, 18, 21, 34, 38, 43, 55, 56, 59, 68, 69, 73, 80, 82, 94,
#              98, 101, 104, 112, 119, 124, 144, 146, 154, 160, 165],
#     "c2.1": [64, 67, 93, 113, 130, 172],
#     "c1.1": [2, 32, 36, 37, 42, 63, 74, 81, 83, 89, 92, 109, 114, 135, 143, 151, 159, 168, 171],
#     "strategy_discovery": [1, 3, 6, 7, 9, 12, 15, 17, 19, 21, 28, 29, 30, 32, 33, 36, 39, 40, 42, 46, 47, 51, 52, 53, 54, 55]
# }

### new criteria:
# for planning amount, learning_participant is better because it also accounts for participants who learned, i.e changed their number of clicks at least once
# clicking_particpants might be better for three cond, that is those people clicked at least once but might not have learned anything
clicking_participants = {
    "v1.0": [1, 5, 6, 10, 15, 17, 18, 21, 24, 29, 34, 35, 38, 40, 43, 45, 55, 56, 59, 62, 66, 68, 69, 73, 75, 77, 80,
             82, 85, 90, 94, 98, 101, 104, 106, 110, 112, 117, 119, 124, 132, 137, 140, 144, 146, 148, 150, 154, 155,
             158, 160, 165, 169, 173],
    "c2.1": [0, 8, 13, 16, 20, 22, 25, 26, 30, 31, 33, 39, 41, 47, 49, 52, 53, 58, 60, 61, 64, 67, 72, 78, 79, 84, 86,
             88, 93, 95, 96, 99, 103, 107, 108, 113, 115, 118, 122, 123, 128, 130, 133, 134, 136, 138, 142, 145, 149,
             152, 156, 162, 164, 166, 170, 172],
    "c1.1": [2, 4, 7, 9, 12, 14, 19, 23, 27, 28, 32, 36, 37, 42, 44, 48, 50, 54, 57, 63, 65, 70, 71, 74, 76, 81, 83, 89,
             91, 92, 100, 102, 105, 109, 111, 114, 116, 120, 125, 127, 129, 131, 135, 139, 143, 147, 151, 153, 157, 159,
             161, 163, 167, 168, 171],
    'low_variance_low_cost': [3, 5, 6, 9, 11, 12, 15, 19, 27, 34, 39, 42, 44, 52, 55, 59, 66, 67, 72, 75, 77, 85, 91,
                              99, 104, 105, 106, 110, 113, 115, 121, 123, 127, 130, 137, 142, 143, 152, 155, 159, 165,
                              170, 172, 176, 179, 184, 186, 196, 200, 207],
    'low_variance_high_cost': [2, 13, 14, 16, 21, 24, 28, 31, 36, 37, 43, 45, 61, 62, 68, 69, 73, 79, 80, 84, 86, 90,
                               98, 100, 102, 107, 124, 128, 132, 135, 138, 140, 144, 147, 153, 157, 160, 163, 166, 171,
                               174, 181, 183, 194, 201, 203, 206],
    'high_variance_low_cost': [4, 7, 8, 17, 23, 26, 29, 33, 35, 40, 48, 50, 51, 53, 56, 58, 64, 71, 78, 82, 87, 92, 93,
                               96, 101, 112, 117, 119, 122, 126, 131, 133, 136, 141, 145, 146, 151, 154, 158, 162, 168,
                               175, 180, 185, 187, 189, 193, 197, 205],
    'high_variance_high_cost': [0, 1, 10, 18, 22, 25, 30, 32, 38, 41, 46, 47, 49, 57, 60, 63, 70, 74, 76, 81, 83, 88,
                                94, 103, 108, 109, 111, 114, 116, 118, 125, 129, 134, 139, 149, 150, 156, 161, 164, 167,
                                169, 173, 177, 182, 188, 191, 195, 198, 199, 204],
    "strategy_discovery": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
                           26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
                           50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
                           75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99,
                           101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120,
                           122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140,
                           141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 159,
                           160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177,
                           178, 180, 181,
                           182, 183, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
                           202, 203, 204,
                           205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224,
                           225, 226, 228,
                           229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 246, 247, 248, 249,
                           250, 251, 252,
                           253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271,
                           272, 273, 274,
                           275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292,
                           293, 294, 295,
                           296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315,
                           316, 317, 318,
                           319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337,
                           339, 340, 341,
                           342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359,
                           360, 361, 362,
                           363, 364, 365, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378]}

model_dict = {
    "PR": [480, 481, 482, 483, 484, 485, 486, 487, 3315, 3316, 3317, 3318],
    "TD": [480, 482, 484, 486, 488, 490, 3315, 3317, 3323, 3325],
    "SE": [480, 481, 484, 485, 488, 489, 3315, 3316, 3323, 3324],
    "PR + TD": [480, 482, 484, 486, 488, 3315, 3317],
    "PR + SE": [480, 481, 484, 485, 488, 3315, 3316],
    "TD + SE": [480, 484, 488, 3315, 3323],
    "PR + SE + TD": [480, 484, 488, 3315],
    "Plain": [491, 3326]}

model_grouped = {
    "PR": [3315, 3316, 3317, 3318],
    "no PR": [3323, 3324, 3325, 3326],
    "TD": [3315, 3317, 3323, 3325],
    "no TD": [3316, 3318, 3324, 3326],
    "SE": [3315, 3316, 3323, 3324],
    "no SE": [3317, 3318, 3325, 3326]}

model_names = {
    3315: "PR + SE + TD",
    3316: "PR + SE",
    3317: "PR + TD",
    3318: "PR",
    3323: "TD + SE",
    3324: "SE",
    3325: "TD",
    3326: "Plain"
}

adaptive_pid = [2, 6, 11, 17, 28, 29, 32, 35, 36, 38, 39, 48, 49, 53, 55, 59, 63, 70, 74, 75, 79, 82, 84, 86, 89, 92,
                95, 103, 105, 109, 111, 112, 115, 118, 125, 147, 151, 154, 165, 166, 171, 172, 173, 174, 175, 181, 186,
                193, 195, 196, 200, 202, 203, 205, 214, 215, 224, 234, 239, 241, 249, 251, 256, 259, 260, 261, 265, 271,
                279, 281, 282, 289, 294, 300, 312, 316, 318, 320, 323, 327, 335, 339, 340, 344, 352, 353, 354, 357, 359,
                360, 369, 378]  # n=92
mod_adaptive_pid = [1, 3, 5, 7, 8, 12, 13, 14, 15, 16, 20, 21, 23, 24, 25, 26, 27, 30, 33, 34, 37, 40, 41, 42, 43, 44,
                    45, 46, 47, 51, 54, 57, 58, 62, 67, 68, 69, 71, 72, 73, 77, 78, 80, 81, 90, 91, 93, 96, 99, 102,
                    104, 106, 107, 110, 113, 116, 117, 120, 123, 124, 126, 127, 128, 131, 136, 139, 140, 141, 142, 143,
                    144, 145, 146, 149, 153, 155, 156, 159, 162, 163, 168, 169, 170, 176, 178, 180, 182, 183, 184, 185,
                    187, 189, 190, 194, 197, 198, 199, 206, 207, 209, 210, 211, 213, 217, 220, 221, 223, 225, 226, 228,
                    229, 231, 238, 242, 244, 247, 248, 252, 258, 263, 268, 269, 272, 273, 274, 275, 276, 277, 278, 280,
                    283, 285, 286, 287, 288, 290, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 310, 311, 314, 315,
                    317, 319, 321, 326, 329, 331, 333, 335, 337, 341, 342, 345, 347, 348, 349, 350, 351, 355, 358, 362,
                    363, 365, 367, 370, 371, 372, 373, 376, 377]  # n=179
maladaptive_pid = [4, 9, 10, 18, 19, 22, 50, 52, 56, 61, 65, 66, 76, 83, 85, 87, 88, 98, 101, 119, 122, 129, 130, 133,
                   134, 135, 137, 138, 148, 152, 160, 161, 164, 177, 192, 201, 204, 212, 216, 218, 219, 232, 233, 235,
                   236, 237, 240, 246, 250, 253, 254, 255, 257, 262, 266, 267, 270, 284, 291, 292, 293, 308, 309, 313,
                   322, 324, 325, 328, 330, 332, 336, 343, 346, 356, 361, 364, 374, 375]  # n=78

## strategy discovery
vanilla_pid = [1, 3, 4, 6, 7, 9, 10, 16, 17, 19, 21, 23, 26, 29, 30, 33, 34, 35, 46, 49, 51, 67, 71, 73, 77, 79, 83, 84,
               92, 106, 110, 116, 127, 128, 135, 136, 138, 139, 141, 143, 146, 147, 155, 160, 161, 165, 167, 174, 177,
               195, 201, 205, 206, 211, 215, 218, 223, 228, 232, 236, 248, 250, 260, 262, 267, 269, 272, 280, 281, 286,
               287, 291, 292, 299, 300, 301, 303, 308, 310, 316, 318, 322, 324, 328, 329, 341, 344, 345, 347, 348, 349,
               350, 357, 359, 360, 361, 362, 364, 369, 370, 371, 373, 374, 375, 377]  # n=105
sc_pid = [2, 5, 11, 15, 18, 27, 28, 48, 50, 53, 55, 56, 57, 62, 69, 70, 72, 76, 81, 82, 88, 89, 103, 105, 109, 111, 112,
          115, 119, 122, 129, 130, 134, 137, 144, 151, 166, 169, 172, 180, 182, 184, 189, 196, 209, 220, 235, 239, 241,
          246, 249, 252, 255, 275, 283, 284, 285, 290, 311, 321, 326, 327, 332, 335, 340, 352, 354, 356, 358,
          378]  # n=70
pr_pid = [8, 13, 20, 32, 38, 39, 40, 42, 61, 63, 65, 75, 78, 87, 91, 104, 125, 126, 140, 142, 148, 152, 154, 163, 164,
          168, 170, 171, 175, 181, 186, 192, 193, 200, 202, 203, 213, 214, 216, 219, 225, 231, 254, 257, 259, 261, 268,
          276, 282, 293, 294, 302, 312, 314, 317, 320, 330, 331, 336, 342, 355]  # n=61
pr_sc_pid = [12, 14, 22, 25, 36, 58, 66, 86, 90, 95, 101, 117, 173, 176, 197, 210, 224, 234, 237, 238, 240, 251, 256,
             258, 265, 271, 273, 274, 277, 278, 279, 289, 309, 313, 315, 323, 325, 339, 343, 346, 351, 353, 363]  # n=43
td_pid = [24, 37, 41, 43, 44, 45, 47, 54, 68, 80, 85, 93, 96, 98, 99, 102, 107, 113, 120, 123, 124, 131, 133, 145, 149,
          153, 156, 159, 162, 178, 185, 187, 190, 194, 198, 199, 207, 217, 221, 226, 229, 242, 244, 247, 253, 263, 270,
          288, 295, 296, 305, 306, 319, 333, 337, 365, 367, 372, 376]  # n=59
td_sc_pid = [52, 74, 183, 212, 233, 298]  # n=6
pr_sc_td_pid = [59, 204]
pr_td_pid = [118, 266, 304]

sc_adaptive = [2, 11, 28, 48, 53, 55, 70, 82, 89, 103, 105, 109, 111, 112, 115, 151, 166, 172, 196, 239, 241, 249, 327,
               335, 340, 352, 354, 378, 36, 86, 95, 173, 224, 234, 251, 256, 265, 271, 279, 289, 323, 339, 353, 74, 59]
sc_maladaptive = [18, 50, 56, 76, 88, 119, 122, 129, 130, 134, 137, 235, 246, 255, 284, 332, 356, 204, 233, 212, 22, 66,
                  101, 237, 240, 309, 313, 325, 343, 346]


def process_clicks(row):
    return [len(sublist) - 1 for sublist in row]

def process_data(data, model_col, pid_col, exp):
    if exp == "strategy_discovery":
        data[pid_col] = data[pid_col].apply(
            lambda x: ast.literal_eval(re.sub(r'(?<=\d|\-)\s+(?=\d|\-)', ', ', x.replace('\n', ' '))) if isinstance(x,
                                                                                                                    str) else x)
        data[model_col] = data[model_col].apply(lambda x: ast.literal_eval(x) if isinstance(x, str) else x)
    elif pid_col == "pid_rewards":
        data[pid_col] = data[pid_col].apply(lambda x: [int(i) for i in x.strip("[]").split()])
    else:
        data[pid_col] = data[pid_col].apply(lambda x: ast.literal_eval(x))
        data[model_col] = data[model_col].apply(lambda x: ast.literal_eval(x))
    return data


discovery_hybrid = [3, 4, 6, 7, 9, 16, 17, 19, 23, 30, 34, 35, 41, 45, 53, 57, 58, 67, 71, 76,
               78, 83, 86, 92, 106, 128, 133, 138, 139, 141, 143, 146, 155, 161, 164, 165,
               167, 174, 175, 177, 184, 189, 194, 195, 201, 203, 206, 211, 216, 218, 219, 223,
               228, 231, 232, 236, 238, 250, 255, 259, 260, 262, 267, 280, 281, 291, 292, 293,
               299, 305, 310, 316, 317, 318, 320, 324, 327, 328, 341, 344, 347, 349, 350, 355,
               356, 357, 359, 360, 361, 362, 373, 374, 375, 377]