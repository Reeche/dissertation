clicked_pid = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
               29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
               56, 57, 58, 59, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,
               84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111,
               112, 113, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135,
               136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 159,
               160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181,
               182, 183, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204,
               205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 228,
               229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 246, 247, 248, 249, 250, 251, 252,
               253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274,
               275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
               296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318,
               319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 339, 340, 341,
               342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362,
               363, 364, 365, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378]  # n=350

### manual grouping, I think where bonus is >4
optimal_pid = [28, 35, 38, 39, 48, 59, 63, 75, 89, 103, 166, 172, 195, 215, 234, 320, 335]
optimal_nonhabitual_pid = [28, 35, 48, 63, 75, 195, 320, 335]  # who also did not examine all nodes on the first trial

## k means based on score (it does not make a difference if I filter for 60-120 trials or all trials)
adaptive_pid = [2, 6, 11, 17, 28, 29, 32, 35, 36, 38, 39, 48, 49, 53, 55, 59, 63, 70, 74, 75, 79, 82, 84, 86, 89, 92,
                95, 103, 105, 109, 111, 112, 115, 118, 125, 147, 151, 154, 165, 166, 171, 172, 173, 174, 175, 181, 186,
                193, 195, 196, 200, 202, 203, 205, 214, 215, 224, 234, 239, 241, 249, 251, 256, 259, 260, 261, 265, 271,
                279, 281, 282, 289, 294, 300, 312, 316, 318, 320, 323, 327, 335, 339, 340, 344, 352, 353, 354, 357, 359,
                360, 369, 378]  # n=92
mod_adaptive_pid = [1, 3, 5, 7, 8, 12, 13, 14, 15, 16, 20, 21, 23, 24, 25, 26, 27, 30, 33, 34, 37, 40, 41, 42, 43, 44,
                    45, 46, 47, 51, 54, 57, 58, 62, 67, 68, 69, 71, 72, 73, 77, 78, 80, 81, 90, 91, 93, 96, 99, 102,
                    104, 106, 107, 110, 113, 116, 117, 120, 123, 124, 126, 127, 128, 131, 136, 139, 140, 141, 142, 143,
                    144, 145, 146, 149, 153, 155, 156, 159, 162, 163, 168, 169, 170, 176, 178, 180, 182, 183, 184, 185,
                    187, 189, 190, 194, 197, 198, 199, 206, 207, 209, 210, 211, 213, 217, 220, 221, 223, 225, 226, 228,
                    229, 231, 238, 242, 244, 247, 248, 252, 258, 263, 268, 269, 272, 273, 274, 275, 276, 277, 278, 280,
                    283, 285, 286, 287, 288, 290, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 310, 311, 314, 315,
                    317, 319, 321, 326, 329, 331, 333, 335, 337, 341, 342, 345, 347, 348, 349, 350, 351, 355, 358, 362,
                    363, 365, 367, 370, 371, 372, 373, 376, 377]  # n=179
maladaptive_pid = [4, 9, 10, 18, 19, 22, 50, 52, 56, 61, 65, 66, 76, 83, 85, 87, 88, 98, 101, 119, 122, 129, 130, 133,
                   134, 135, 137, 138, 148, 152, 160, 161, 164, 177, 192, 201, 204, 212, 216, 218, 219, 232, 233, 235,
                   236, 237, 240, 246, 250, 253, 254, 255, 257, 262, 266, 267, 270, 284, 291, 292, 293, 308, 309, 313,
                   322, 324, 325, 328, 330, 332, 336, 343, 346, 356, 361, 364, 374, 375]  # n=78

## participants who used the optimal strategy at least twice
found_optimal_twice_pid = [2, 8, 13, 14, 20, 26, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 41, 48, 49, 53, 55, 56, 57, 59,
                           61, 62, 63, 70, 72, 74, 75, 78, 82, 83, 84, 85, 86, 87, 89, 90, 92, 95, 104, 105, 109, 111,
                           112, 115, 117, 118, 122, 125, 130, 140, 141, 147, 151, 152, 154, 162, 165, 166, 168, 169,
                           171, 172, 173, 175, 176, 181, 182, 183, 184, 186, 193, 194, 195, 196, 200, 202, 203, 205,
                           209, 210, 212, 213, 215, 216, 220, 223, 224, 225, 234, 239, 240, 246, 249, 251, 252, 254,
                           256, 259, 260, 261, 265, 267, 269, 271, 274, 276, 277, 279, 281, 282, 285, 289, 290, 291,
                           292, 294, 303, 304, 312, 316, 317, 318, 320, 321, 323, 325, 327, 328, 336, 339, 340, 342,
                           343, 344, 352, 353, 354, 357, 358, 359, 360, 369, 371, 373, 374, 378]  # n = 150
found_optimal_once_pid = [2, 8, 13, 14, 20, 22, 26, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 48, 49, 53, 55, 56,
                          57, 58, 59, 61, 62, 63, 66, 69, 70, 72, 74, 75, 78, 82, 83, 84, 85, 86, 87, 89, 90, 92, 95,
                          104, 105, 109, 111, 112, 115, 117, 118, 119, 122, 125, 128, 130, 136, 137, 140, 141, 147, 151,
                          152, 153, 154, 155, 162, 165, 166, 168, 169, 171, 172, 173, 174, 175, 176, 181, 182, 183, 184,
                          186, 192, 193, 194, 195, 196, 200, 202, 203, 205, 209, 210, 212, 213, 215, 216, 220, 223, 224,
                          225, 234, 239, 240, 246, 249, 251, 252, 254, 256, 259, 260, 261, 265, 267, 269, 271, 272, 274,
                          276, 277, 278, 279, 281, 282, 285, 286, 289, 290, 291, 292, 293, 294, 303, 304, 311, 312, 314,
                          315, 316, 317, 318, 320, 321, 323, 324, 325, 327, 328, 336, 339, 340, 342, 343, 344, 346, 352,
                          353, 354, 357, 358, 359, 360, 369, 371, 373, 374, 378]  # n=172

found_optimal_twice_pid_not_examined_all = [8, 13, 14, 26, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 41, 48, 49, 53, 55,
                                            56, 57, 59,
                                            61, 62, 63, 70, 72, 74, 75, 78, 82, 83, 84, 85, 86, 87, 89, 90, 92, 95, 104,
                                            105, 109,
                                            112, 115, 117, 118, 122, 125, 130, 140, 141, 147, 152, 154, 162, 165, 168,
                                            169,
                                            171, 173, 175, 176, 181, 182, 183, 184, 186, 193, 194, 195, 196, 200, 202,
                                            203, 205,
                                            209, 212, 215, 216, 220, 223, 224, 225, 234, 239, 240, 246, 249, 251, 252,
                                            254,
                                            256, 259, 260, 261, 265, 267, 269, 271, 274, 276, 277, 279, 281, 282, 285,
                                            289, 290, 291,
                                            292, 294, 303, 304, 312, 316, 317, 318, 320, 321, 323, 325, 327, 328, 336,
                                            339, 340, 342,
                                            343, 344, 352, 353, 354, 357, 358, 359, 360, 369, 371, 373, 374,
                                            378]  # n = 150

#                     228, 234, 257, 264, 276, 282, 313, 324, 331, 332, 338, 340, 343, 344, 358, 363, 370, 372]
# mb_pid = [5, 12, 13, 15, 21, 42, 44, 47, 61, 66, 69, 74, 79, 81, 84, 87, 88, 104, 105, 112, 127, 130, 136, 144, 160,
#           163, 168, 176, 182, 197, 198, 224, 225, 248, 251, 258, 269, 270, 272, 273, 283, 284, 285, 288, 290, 298, 301,
#           302, 303, 314, 325, 326, 345, 351]
# mf_pid = [2, 8, 24, 28, 43, 48, 49, 54, 62, 68, 73, 75, 77, 80, 85, 91, 93, 96, 99, 102, 107, 109, 110, 113, 116, 117,
#           120, 122, 123, 124, 126, 131, 137, 145, 147, 149, 153, 156, 159, 166, 169, 171, 172, 178, 181, 183, 185, 187,
#           190, 199, 200, 207, 212, 213, 220, 221, 226, 229, 233, 242, 244, 246, 247, 252, 261, 263, 266, 274, 279, 286,
#           287, 294, 295, 296, 306, 309, 319, 333, 337, 340, 342, 352, 353, 365, 367, 369, 372, 376, 378]
# hybrid_pid = [3, 4, 6, 7, 9, 16, 17, 18, 19, 23, 30, 32, 34, 35, 41, 45, 53, 57, 58, 63, 67, 71, 76, 78, 82, 83, 86, 92,
#               106, 128, 133, 138, 139, 141, 143, 146, 155, 161, 164, 165, 167, 173, 174, 175, 177, 184, 189, 194, 195,
#               201, 203, 206, 211, 216, 218, 219, 223, 228, 231, 232, 236, 238, 250, 255, 259, 260, 262, 267, 280, 281,
#               291, 292, 293, 299, 305, 310, 316, 317, 318, 320, 324, 327, 328, 341, 344, 346, 347, 349, 350, 355, 356,
#               357, 359, 360, 361, 362, 371, 373, 374, 375, 377]
# habitual_pid = [1, 10, 11, 14, 20, 22, 25, 26, 27, 29, 33, 36, 37, 38, 39, 40, 46, 50, 51, 52, 55, 56, 59, 65, 70, 72,
#                 89, 90, 95, 98, 101, 111, 115, 118, 119, 125, 129, 134, 135, 140, 142, 148, 151, 152, 154, 162, 170,
#                 180, 186, 192, 193, 196, 202, 204, 205, 209, 210, 214, 215, 217, 234, 235, 237, 239, 240, 241, 249, 253,
#                 254, 256, 257, 265, 268, 271, 275, 276, 277, 278, 282, 289, 300, 304, 308, 311, 312, 313, 315, 321, 322,
#                 323, 329, 330, 331, 332, 336, 339, 343, 348, 354, 358, 363, 364, 370]

### for cogsci, no MB:
habitual_pid = [1, 10, 11, 12, 14, 15, 20, 22, 25, 26, 27, 29, 33, 36, 37, 38, 39, 40, 42, 46, 47, 50, 51, 52, 55, 56,
                59, 61, 65, 70, 72, 88, 89, 90, 95, 98, 101, 103, 111, 115, 118, 119, 125, 129, 130, 134, 135, 140, 142,
                144, 148, 151, 152, 154, 162, 170, 180, 182, 186, 192, 193, 196, 202, 204, 205, 209, 210, 214, 215, 217,
                224, 234, 235, 237, 239, 240, 241, 249, 253, 254, 256, 257, 265, 268, 271, 273, 275, 276, 277, 278, 282,
                285, 288, 289, 290, 298, 300, 304, 308, 311, 312, 313, 315, 321, 322, 323, 326, 329, 330, 331, 332, 336,
                339, 343, 348, 351, 354, 358, 363, 364, 370]
mf_pid = [2, 5, 8, 13, 24, 28, 43, 48, 49, 54, 62, 68, 69, 73, 74, 75, 77, 80, 81, 85, 87, 91, 93, 96, 99, 102, 105,
          107, 109, 110, 112, 113, 116, 117, 120, 122, 123, 124, 126, 131, 136, 137, 145, 147, 149, 153, 156, 159, 166,
          168, 169, 171, 172, 178, 181, 183, 185, 187, 190, 199, 200, 207, 212, 213, 220, 221, 226, 229, 233, 242, 244,
          246, 247, 251, 252, 258, 261, 263, 266, 274, 279, 283, 286, 287, 294, 295, 296, 302, 306, 309, 314, 319, 333,
          335, 337, 340, 342, 352, 353, 365, 367, 369, 372, 376, 378]
hybrid_pid = [3, 4, 6, 7, 9, 16, 17, 18, 19, 21, 23, 30, 32, 34, 35, 41, 44, 45, 53, 57, 58, 63, 66, 67, 71, 76, 78, 79,
              82, 83, 84, 86, 92, 104, 106, 127, 128, 133, 138, 139, 141, 143, 146, 155, 160, 161, 163, 164, 165, 167,
              173, 174, 175, 176, 177, 184, 189, 194, 195, 197, 198, 201, 203, 206, 211, 216, 218, 219, 223, 225, 228,
              231, 232, 236, 238, 248, 250, 255, 259, 260, 262, 267, 269, 270, 272, 280, 281, 284, 291, 292, 293, 299,
              301, 303, 305, 310, 316, 317, 318, 320, 324, 325, 327, 328, 341, 344, 345, 346, 347, 349, 350, 355, 356,
              357, 359, 360, 361, 362, 371, 373, 374, 375, 377]

## PID who examined all nodes on the first trial
examined_all_pid = [1, 2, 20, 22, 24, 45, 50, 68, 80, 88, 111, 129, 135, 142, 148, 151, 164, 166, 172, 189, 210, 213,
                    228, 234, 257, 264, 276, 282, 313, 324, 331, 332, 338, 340, 343, 344, 358, 363, 370, 372]

## clicked PID who did not examine all nodes on the first trial
not_examined_all_pid = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 25, 26, 27, 28, 29, 30, 32,
                        33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58,
                        59, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86,
                        87, 89, 90, 91, 92, 93, 95, 96, 98, 99, 101, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113,
                        115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 130, 131, 133, 134, 136, 137,
                        138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 152, 153, 154, 155, 156, 159, 160, 161, 162,
                        163, 165, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185,
                        186, 187, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
                        209, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 229, 231, 232, 233,
                        235, 236, 237, 238, 239, 240, 241, 242, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
                        256, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277,
                        278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298,
                        299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319,
                        320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 333, 335, 336, 337, 339, 341, 342, 345, 346,
                        347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 364, 365, 367, 369,
                        371, 373, 374, 375, 376, 377, 378]

## habitual participants who did NOT examine all nodes on the first trial
habitual_not_examined_all_pid = [256, 265, 10, 11, 12, 268, 14, 15, 271, 273, 275, 277, 278, 25, 26, 27, 29, 285, 288,
                                 33, 289, 290, 36, 37, 38, 39, 40, 42, 298, 300, 46, 47, 304, 51, 52, 308, 55, 56, 311,
                                 312, 59, 61, 315, 65, 321, 322, 323, 70, 326, 72, 329, 330, 336, 339, 89, 90, 348, 95,
                                 351, 98, 354, 101, 103, 364, 115, 118, 119, 125, 130, 134, 140, 144, 152, 154, 162,
                                 170, 180, 182, 186, 192, 193, 196, 202, 204, 205, 209, 214, 215, 217, 224, 235, 237,
                                 239, 240, 241, 249, 253, 254]
habitual_examined_all_pid = [1, 129, 257, 135, 142, 20, 148, 22, 151, 276, 282, 50, 313, 331, 332, 210, 343, 88, 358,
                             234, 363, 111, 370]

vanilla_pid = [1, 3, 4, 6, 7, 9, 10, 16, 17, 19, 21, 23, 26, 29, 30, 33, 34, 35, 46, 49, 51, 67, 71, 73, 77, 79, 83, 84,
               92, 106, 110, 116, 127, 128, 135, 136, 138, 139, 141, 143, 146, 147, 155, 160, 161, 165, 167, 174, 177,
               195, 201, 205, 206, 211, 215, 218, 223, 228, 232, 236, 248, 250, 260, 262, 267, 269, 272, 280, 281, 286,
               287, 291, 292, 299, 300, 301, 303, 308, 310, 316, 318, 322, 324, 328, 329, 341, 344, 345, 347, 348, 349,
               350, 357, 359, 360, 361, 362, 364, 369, 370, 371, 373, 374, 375, 377]  # n=105
sc_pid = [2, 5, 11, 15, 18, 27, 28, 48, 50, 53, 55, 56, 57, 62, 69, 70, 72, 76, 81, 82, 88, 89, 103, 105, 109, 111, 112,
          115, 119, 122, 129, 130, 134, 137, 144, 151, 166, 169, 172, 180, 182, 184, 189, 196, 209, 220, 235, 239, 241,
          246, 249, 252, 255, 275, 283, 284, 285, 290, 311, 321, 326, 327, 332, 335, 340, 352, 354, 356, 358,
          378]  # n=70
pr_pid = [8, 13, 20, 32, 38, 39, 40, 42, 61, 63, 65, 75, 78, 87, 91, 104, 125, 126, 140, 142, 148, 152, 154, 163, 164,
          168, 170, 171, 175, 181, 186, 192, 193, 200, 202, 203, 213, 214, 216, 219, 225, 231, 254, 257, 259, 261, 268,
          276, 282, 293, 294, 302, 312, 314, 317, 320, 330, 331, 336, 342, 355] # n=61
pr_sc_pid = [12, 14, 22, 25, 36, 58, 66, 86, 90, 95, 101, 117, 173, 176, 197, 210, 224, 234, 237, 238, 240, 251, 256,
             258, 265, 271, 273, 274, 277, 278, 279, 289, 309, 313, 315, 323, 325, 339, 343, 346, 351, 353, 363] # n=43
td_pid = [24, 37, 41, 43, 44, 45, 47, 54, 68, 80, 85, 93, 96, 98, 99, 102, 107, 113, 120, 123, 124, 131, 133, 145, 149,
          153, 156, 159, 162, 178, 185, 187, 190, 194, 198, 199, 207, 217, 221, 226, 229, 242, 244, 247, 253, 263, 270,
          288, 295, 296, 305, 306, 319, 333, 337, 365, 367, 372, 376] # n=59
td_sc_pid = [52, 74, 183, 212, 233, 298] # n=6
pr_sc_td_pid = [59, 204]
pr_td_pid = [118, 266, 304]

def assign_model_names(row):
    if row['class'] == 'hybrid' and str(row['model_index']) in ["491", "3326"]:
        return 'hybrid Reinforce'
    elif row['class'] == 'hybrid' and str(row['model_index']) == "479":
        return 'hybrid LVOC'
    elif row['class'] in ['pure', 'mf'] and str(row['model_index']) == "491":
        return 'MF - Reinforce'
    elif row['class'] in ['pure', 'mf'] and str(row['model_index']) == "479":
        return 'MF - LVOC'
    elif str(row['model_index']) == "1743":
        return 'Habitual'
    elif str(row['model_index']) == "1756":
        return 'Non-learning'
    elif str(row['model_index']) == "522":
        return 'SSL'
    elif row['model_index'] == "no_assumption_level":
        return 'MB - No assump., grouped'
    elif row['model_index'] == "no_assumption_individual":
        return 'MB - No assump., ind.'
    elif row['model_index'] == "uniform_individual":
        return 'MB - Uniform, ind.'
    elif row['model_index'] == "uniform_level":
        return 'MB - Uniform, grouped'
    elif row['model_index'] == "level_level":
        return 'MB - Level, grouped'
    elif row['model_index'] == "level_individual":
        return 'MB - Level, ind.'
    else:
        raise ValueError("Model class combination not found")


def assign_variant_names(row):
    if str(row['model']) == "3315":
        return "PR + SC + TD"
    elif str(row['model']) == "3316":
        return "PR + SC"
    elif str(row['model']) == "3317":
        return "PR + TD"
    elif str(row['model']) == "3318":
        return "PR"
    elif str(row['model']) == "3323":
        return "SC + TD"
    elif str(row['model']) == "3324":
        return "SC"
    elif str(row['model']) == "3325":
        return "TD"
    elif str(row['model']) == "3326":
        return "Vanilla"
    else:
        raise ValueError("Model class combination not found")


alternative_models = ["Non-learning", "SSL", "Habitual"]
mcrl_models = ["hybrid Reinforce", "MF - Reinforce"]
hybrid_reinforce = ["hybrid Reinforce"]
mf_reinforce = ["MF - Reinforce"]
mb_models = ["MB - No assump., grouped", "MB - No assump., ind.", "MB - Uniform, ind.",
             "MB - Uniform, grouped", "MB - Level, grouped", "MB - Level, ind."]
# variants = [3315, 3316, 3317, 3318, 3323, 3324, 3325, 3326]
variants = ["PR + SC + TD", "PR + SC", "PR + TD", "PR", "SC + TD", "SC", "TD", "Vanilla"]
# variants = ["PR"]

variant_pids = {"PR + SC + TD": pr_sc_td_pid, "PR + SC": pr_sc_pid, "PR + TD": pr_td_pid, "PR": pr_pid,
                "SC + TD": td_sc_pid, "SC": sc_pid, "TD": td_pid, "Vanilla": vanilla_pid}
all_models = alternative_models + mcrl_models + mb_models
